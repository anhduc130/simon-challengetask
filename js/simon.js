var KEYS = ['c', 'd', 'e', 'f'];
var NOTE_DURATION = 1000;
var isFirstKey = true;
var keysArray = [];
var setDuration;
var currentKeyIndex = 0;
var numOfPlays = 0;
var isAutoPlay = true;
var score = 0;
// NoteBox
//
// Acts as an interface to the coloured note boxes on the page, exposing methods
// for playing audio, handling clicks,and enabling/disabling the note box.
function NoteBox(key, onClick) {
	// Create references to box element and audio element.
	var boxEl = document.getElementById(key);
	var audioEl = document.getElementById(key + '-audio');
	if (!boxEl) throw new Error('No NoteBox element with id' + key);
	if (!audioEl) throw new Error('No audio element with id' + key + '-audio');

	// When enabled, will call this.play() and this.onClick() when clicked.
	// Otherwise, clicking has no effect.
	var enabled = false;
	// Counter of how many play calls have been made without completing.
	// Ensures that consequent plays won't prematurely remove the active class.
	var playing = 0;

	this.key = key;
	this.onClick = onClick || function () {};

	// Plays the audio associated with this NoteBox
	this.play = function () {
		playing++;
		// Always play from the beginning of the file.
		audioEl.currentTime = 0;
		audioEl.play();

		// Set active class for NOTE_DURATION time
		boxEl.classList.add('active');
		setTimeout(function () {
			playing--
			if (!playing) {
				boxEl.classList.remove('active');
			}
			// Check whether all the notes are played accordingly
			numOfPlays++;
			if(numOfPlays == keysArray.length){
				numOfPlays = 0;
				// If the plays are generated automatically by the app, enable NoteBoxes to let the player start playing
				if(isAutoPlay){
					isAutoPlay = false;
					KEYS.forEach(function(key){
						notes[key].enable();
					});
				}
				// If the plays are generated by the player, disable NoteBoxes to let the app start playing new sequence of notes
				else{
					isAutoPlay = true;
					KEYS.forEach(function(key){
						notes[key].disable();
					});
				}
			}
		}, NOTE_DURATION)
	}

	// Enable this NoteBox
	this.enable = function () {
		enabled = true;
	}

	// Disable this NoteBox
	this.disable = function () {
		enabled = false;
	}

	// Call this NoteBox's clickHandler and play the note.
	this.clickHandler = function () {
		if (!enabled) return;
		// If this is the last note played by the user and it is the same as the last note generated by the app, 
		// increase the score, disable all NoteBoxes and let the app play a new sequence of notes
		if(this.key == keysArray[currentKeyIndex] && currentKeyIndex == keysArray.length - 1){
			document.getElementById('score').innerHTML = 'Score: ' + ++score;
			KEYS.forEach(function(key){
				notes[key].disable();
			});
			this.onClick(this.key);
			this.play(); 
			setTimeout(function(){
				currentKeyIndex = 0;
				addRandomKey();
				playKeysArray();
			},1500);
		}
		// If this note is not the last note played by the user and it is the same as the according note generated by the app,
		// the game continues and the app keeps waiting for the user to punch in the next note
		else if(this.key == keysArray[currentKeyIndex] && currentKeyIndex <= keysArray.length - 1){
			this.onClick(this.key);
			this.play();
			currentKeyIndex++;
		}
		// If the note played is not the same as the according note generated by the app, restart the game
		else{
			score = 0;
			document.getElementById('score').innerHTML = 'Score: 0';
			KEYS.forEach(function(key){
				notes[key].disable();
			});
			setTimeout(function(){
				numOfPlays = 0;
				isAutoPlay = true;
				keysArray.length = 0;
				currentKeyIndex = 0;
				addRandomKey();
				playKeysArray();
			},2500);
		}
	}.bind(this);

	boxEl.addEventListener('mousedown', this.clickHandler);
}

// This function helps play all the keys in the array generated by the app
function playKeysArray(){
	keysArray.forEach(function(key,i){
		setTimeout(notes[key].play.bind(null, key), i * NOTE_DURATION);
	});
}

// This function helps generated a random key and add it into the arrayKeys
function addRandomKey(){
	var randomKeyIndex = Math.floor(Math.random() * 4);
	keysArray.push(KEYS[randomKeyIndex]);
}

// Example usage of NoteBox.
//
// This will create a map from key strings (i.e. 'c') to NoteBox objects so that
// clicking the corresponding boxes on the page will play the NoteBox's audio.
// It will also demonstrate programmatically playing notes by calling play directly.
var notes = {};

KEYS.forEach(function (key) {
	notes[key] = new NoteBox(key);
});

// Initialize the game
setTimeout(function(){
	addRandomKey();
	playKeysArray();
},1500);

/*KEYS.concat(KEYS.slice().reverse()).forEach(function(key, i) {
	setTimeout(notes[key].play.bind(null, key), i * NOTE_DURATION);
});*/
